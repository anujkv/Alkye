#This is a basic workflow for build and deploying with the master branch now, but we can add multiple steps for other
#branches as well as.

#start with actions.
name: Build & Deploy
#control when the action will run.
on:
  push:
    branches: [master]
  pull_request:
    branches: [master]

#allow you to run this workflow manually from the actions tab
  workflow_dispatch:

#A work run is made up of one or more jobs that can  run sequentially or in parallel
jobs:
  #this job contains a single job called 'build/lint'
  lint:
    #the type of runner that the job will run on
    runs-on: ubuntu-latest

    #steps represent a sequence of tasks that will be executed as part of the job
    steps:
      - name: Checkout the code
      #checkout repository under $GITHUB_WORKSPACE, so job can access it
        uses: actions/checkout@v2

      - name: Run Tests only for empty check other jobs so we beypass this
        run: echo Run lint

#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#                java-version: '17'
#                distribution: 'temurin'
#
#      #add gradlew permission
#      - name: Set execute permission on gradlew
#        run: chmod +x ./gradlew
#
#      - name: Clean Project
#        run: ./gradlew clean
#
#      #This is a Gradle task that runs the Android Lint tool on the code for the debug build
#      #variant. Android Lint is a static code analysis tool that checks your Android project
#      #for potential issues, such as code errors, performance problems, security vulnerabilities,
#      #and best practices
#      - name: Build with Lint
#        run: ./gradlew lintDebug
#
#      - name: Assemble Debug
#        run: ./gradlew assembleDebug
#
#      #upload the test report
#      - name: Upload a Build Artifact
#        uses: actions/upload-artifact@v4.4.0
#        with:
#          name: lint.html
#          path: app/build/reports/lint-results-debug.html

      # Optional: Clean up temporary files to save space
      # - name: Clean up temp files
      #   run: |
      #     ./gradlew cleanBuildCache
      #     ./gradlew clean

  unit-test:
    needs: [lint]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run Unit Tests
        run: echo Run unit-tests

#      - name: Set up JDK 17
#        uses: actions/setup-java@v3
#        with:
#                java-version: '17'
#                distribution: 'temurin'
#
#      - name: Set execute permission on gradlew
#        run: chmod +x ./gradlew
#
#      - name: Clean Project
#        run: ./gradlew clean
#
#      - name: Run tests
#        run: ./gradlew test
#
#      - name: Upload test result
#        uses: actions/upload-artifact@v4.4.0
#        with:
#          name: unit_test_reports.html
#          path: app/build/reports/tests/testDebugUnitTest/

  instrumentation-test:
    needs: [unit-test]
    runs-on: macos-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Run Instrumentation Tests
        run: echo Run espresso tests

  #     - name: Setup JDK 17
  #       uses: actions/setup-java@v3
  #       with:
  #         java-version: '17'
  #         distribution: 'temurin'

  #     - name: Set execute permission on gradlew
  #       run: chmod +x ./gradlew

  #     - name: Clean Project
  #       run: ./gradlew clean

  #     - name: Set up Emulator
  #       uses: reactivecircus/android-emulator-runner@v2
  #       with:
  #         api-level: 34
  #         target: default
  #         arch: arm64-v8a
  #         # profile: pixel_3
  #         emulator-options: "-no-window -no-audio -verbose -accel off"
  #         disable-animations: true
  #         boot-timeout: 1200
  #         script: ./gradlew connectedAndroidTest

  #     # - name: Check Emulator Devices
  #     #   run: adb devices

  #     # - name: Wait for Emulator to Boot
  #     #   run: |
  #     #     adb wait-for-device shell getprop init.svc.bootanim | grep stopped
  #     #     timeout-minutes: 10  # Wait up to 10 minutes for the emulator to boot

  #     - name: Run instrumentation tests
  #       run: ./gradlew connectedAndroidTest

  #     - name: Upload test report
  #       uses: actions/upload-artifact@v4.4.0
  #       with:
  #         name: instrumentation_test_report
  #         path: app/build/reports/androidTests/connected/

  static-code-analysis:
    needs: [instrumentation-test]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout the code
        uses: actions/checkout@v2

      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: SonarCloud Scan
        run: ./gradlew app:sonarqube -Dsonar.login={{ secrets.SONAR_TOKEN }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}